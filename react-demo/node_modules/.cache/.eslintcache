[{"C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\index.js":"1","C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\App.js":"2","C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\reportWebVitals.js":"3","C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\CounterComponent.js":"4","C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\Results.js":"5","C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\UPIQRCode.js":"6","C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\Home.js":"7"},{"size":586,"mtime":1688546622157,"results":"8","hashOfConfig":"9"},{"size":173,"mtime":1688546226251,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1688545664771,"results":"11","hashOfConfig":"9"},{"size":5283,"mtime":1688812620242,"results":"12","hashOfConfig":"9"},{"size":5934,"mtime":1688833388124,"results":"13","hashOfConfig":"9"},{"size":458,"mtime":1688819554141,"results":"14","hashOfConfig":"9"},{"size":0,"mtime":1688818779070,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1t8fscx",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\index.js",[],[],[],"C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\App.js",[],[],"C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\reportWebVitals.js",[],[],"C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\CounterComponent.js",["39","40","41","42"],[],"C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\Results.js",["43","44","45","46","47","48","49","50","51","52","53"],[],"import { useEffect, useRef, useState } from \"react\";\r\nimport defaultImage from './camera.svg';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport './modal.css';\r\nimport UPIQRCode from './UPIQRCode';\r\nimport Home from './Home.js';\r\nimport {\r\n  Cluster,\r\n  clusterApiUrl,\r\n  Connection,\r\n  PublicKey,\r\n  Keypair,\r\n  LAMPORTS_PER_SOL,\r\n} from \"@solana/web3.js\";\r\nimport { encodeURL, createQR } from \"@solana/pay\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport QRCodeStyling from '@solana/qr-code-styling';\r\n\r\n\r\nconst Results = (props) => {\r\n  const {path,output,closeModel,processimage}=props\r\n  const [isDisabled, setIsDisabled] = useState(true);\r\n  const [issolDisabled, setsolIsDisabled] = useState(false);\r\n  const [balance, setBalance] = useState(0);\r\n  const [txDone, setTxDone] = useState(false);\r\n  const ref = useRef(null);\r\n  let url='';\r\n\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n        checkTx();\r\n    }, 1000);\r\n\r\n    return () => {\r\n        clearInterval(timer);\r\n    };\r\n}, []);\r\n\r\nasync function checkTx() {\r\n  const balNew = await fetchBalance();\r\n  console.log(\"checked\", balNew);\r\n  console.log(\"balance dekhlo\", balance)\r\n  if (balNew != balance) {\r\n      setTxDone(true);\r\n      console.log(\"tx hogaya bro\", balance);\r\n  }\r\n}\r\nasync function fetchBalance() {\r\n  const address = reciptaddress;\r\n  const key = new PublicKey(address);\r\n  const connection = new Connection(clusterApiUrl(\"devnet\"));\r\n  const bal = await connection.getBalance(key);\r\n  return bal / LAMPORTS_PER_SOL;\r\n}\r\n\r\nfunction createTxQr(recipientAddr, Amount) {\r\n  const recipient = new PublicKey(recipientAddr);\r\n  const amount = new BigNumber(Amount);\r\n  const reference = new Keypair().publicKey;\r\n  const label = \"\"; //project name\r\n  const message = \"\"; //what message on tx ?\r\n  const memo = \"\"; //project name\r\n  const url = encodeURL({\r\n      recipient,\r\n      amount,\r\n      reference,\r\n      label,\r\n      message,\r\n      memo,\r\n  });\r\n  console.log(\"url\", url.href);\r\n\r\n  if (typeof window !== \"undefined\") {\r\n      const qrCode = createQR(url,200);\r\n      qrCode.append(ref.current);\r\n  }\r\n  \r\n  console.log(\"bro bal\", balance)\r\n}\r\n\r\n  function createData(Item, Quantity, Cost) {\r\n    return {Item, Quantity, Cost};\r\n  }\r\n  let map=[];\r\n  let names=[\"kurkure\",\"parleg\",\"lays\",\"redbull\"];\r\n  let counter=[0,0,0,0]\r\n  let cost=[20,10,20,125]\r\n  let totalcost=0;\r\n  let soltotalcost=0;\r\n  let upiId=\"shlok08@ybl\";\r\n  console.log(output)\r\n  console.log(typeof(output))\r\n  for (var j = 0; j < output.length; j++) {\r\n    var item = output[j];\r\n  \r\n    if(item==0)\r\n    {\r\n      counter[0]++; \r\n    }\r\n    else if(item ===2 )\r\n    {\r\n      counter[2]++;\r\n  }\r\n    else if(item ===1 )\r\n    {  \r\n      counter[1]++;\r\n    \r\n  }\r\n  else\r\n  {\r\n    counter[3]++; \r\n}\r\n    }\r\n    let i = 0;\r\n\r\n   \r\nwhile (i < counter.length) {\r\n  \r\n    if(counter[i]!==0){\r\n      console.log(i+\"   \"+counter[i]);\r\n      map.push(createData(names[i],counter[i],cost[i]*counter[i]))\r\n      totalcost=totalcost+cost[i]*counter[i];\r\n    }\r\n    i++;\r\n}\r\nsoltotalcost=totalcost*0.001;\r\n\r\nconsole.log(map)\r\n  function onclickfun(){\r\n    \r\n    processimage(defaultImage)\r\n    closeModel(false);\r\n  }\r\n  function upigenrator(){\r\n    setsolIsDisabled(true)\r\n    setIsDisabled(false)\r\n  }\r\n\r\n  function solanaqr(){\r\n\r\n    createTxQr(reciptaddress,soltotalcost)\r\n    setIsDisabled(true)\r\n\r\nsetsolIsDisabled(false)\r\n  }\r\n\r\nlet reciptaddress='kTTpYq1DrudiVtnGKVwZcc5SYvRi3PhF2ai5kVqzkiu';\r\n  \r\n  \r\n  \r\n\r\n  return (\r\n    <div className='total'>\r\n    <div className='leftside'>\r\n      <img src={path} id=\"imagefinal\"></img>\r\n      <div id=\"table\"><TableContainer style={{ maxHeight: '100%', overflow: 'auto',backgroundColor:'#3F2305' }} component={Paper}>\r\n      <Table sx={{ minWidth: 650, fontSize: '14rem' ,color:'beige'}}  style={{ maxHeight: '10%', overflow: 'auto' }}saria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell sx={{ fontSize: '2rem',color:\"beige\" }}>Item</TableCell>\r\n            <TableCell sx={{ fontSize: '2rem',color:\"beige\" }} align=\"right\">Quantity&nbsp;</TableCell>\r\n            <TableCell sx={{ fontSize: '2rem',color:\"beige\" }} align=\"right\">Cost&nbsp;(Rs)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {map.map((row) => (\r\n            <TableRow \r\n              key={row.name}\r\n              sx={{ '&:last-child td, &:last-child th': { border: 0 }, fontSize: '1.5rem',color:\"beige\" }}\r\n            >\r\n              <TableCell component=\"th\" scope=\"row\" sx={{ fontSize: '1.2  rem',color:\"beige\" }}>\r\n                {row.Item} \r\n              </TableCell>\r\n              <TableCell align=\"right\" sx={{ fontSize: '1.2  rem',color:\"beige\" }}>{row.Quantity}</TableCell>\r\n              <TableCell align=\"right\"sx={{ fontSize: '1.2  rem',color:\"beige\" }}>{row.Cost}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer></div>\r\n      \r\n    \r\n    </div>\r\n    <div className='rightside'>\r\n      <h2 id=\"finalamt\"> The total payable amount is Rs. {totalcost}</h2>\r\n      <button className='paymentbtn' onClick={solanaqr}> Pay With Solana</button>\r\n      <button className='paymentbtn upi' onClick={upigenrator}> Pay With Upi</button>\r\n      <div id=\"qrimage\">\r\n      {isDisabled ? null : (\r\n        <UPIQRCode amount={totalcost} />\r\n      )}\r\n    </div>\r\n    <div id=\"qrimage\">\r\n      {issolDisabled ? null : (\r\n        <div id=\"qrimage\" ref={ref}></div>\r\n      )}\r\n    </div>\r\n    <button id=\"sucess\" onClick={onclickfun}>On Sucess</button>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\UPIQRCode.js",[],[],"C:\\Users\\Shlok\\Desktop\\react2\\react-demo\\src\\Home.js",[],[],{"ruleId":"54","severity":1,"message":"55","line":102,"column":9,"nodeType":"56","endLine":102,"endColumn":66},{"ruleId":"57","severity":1,"message":"58","line":106,"column":9,"nodeType":"56","endLine":106,"endColumn":79},{"ruleId":"57","severity":1,"message":"58","line":110,"column":9,"nodeType":"56","endLine":110,"endColumn":79},{"ruleId":"54","severity":1,"message":"55","line":123,"column":13,"nodeType":"56","endLine":123,"endColumn":199},{"ruleId":"59","severity":1,"message":"60","line":12,"column":8,"nodeType":"61","messageId":"62","endLine":12,"endColumn":12},{"ruleId":"59","severity":1,"message":"63","line":14,"column":3,"nodeType":"61","messageId":"62","endLine":14,"endColumn":10},{"ruleId":"59","severity":1,"message":"64","line":23,"column":8,"nodeType":"61","messageId":"62","endLine":23,"endColumn":21},{"ruleId":"59","severity":1,"message":"65","line":30,"column":19,"nodeType":"61","messageId":"62","endLine":30,"endColumn":29},{"ruleId":"59","severity":1,"message":"66","line":31,"column":10,"nodeType":"61","messageId":"62","endLine":31,"endColumn":16},{"ruleId":"59","severity":1,"message":"67","line":33,"column":7,"nodeType":"61","messageId":"62","endLine":33,"endColumn":10},{"ruleId":"68","severity":1,"message":"69","line":43,"column":4,"nodeType":"70","endLine":43,"endColumn":6,"suggestions":"71"},{"ruleId":"72","severity":1,"message":"73","line":49,"column":14,"nodeType":"74","messageId":"75","endLine":49,"endColumn":16},{"ruleId":"59","severity":1,"message":"76","line":96,"column":7,"nodeType":"61","messageId":"62","endLine":96,"endColumn":12},{"ruleId":"72","severity":1,"message":"77","line":102,"column":12,"nodeType":"74","messageId":"75","endLine":102,"endColumn":14},{"ruleId":"54","severity":1,"message":"55","line":161,"column":7,"nodeType":"56","endLine":161,"endColumn":39},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","no-unused-vars","'Home' is defined but never used.","Identifier","unusedVar","'Cluster' is defined but never used.","'QRCodeStyling' is defined but never used.","'setBalance' is assigned a value but never used.","'txDone' is assigned a value but never used.","'url' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkTx'. Either include it or remove the dependency array.","ArrayExpression",["78"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'upiId' is assigned a value but never used.","Expected '===' and instead saw '=='.",{"desc":"79","fix":"80"},"Update the dependencies array to be: [checkTx]",{"range":"81","text":"82"},[1307,1309],"[checkTx]"]