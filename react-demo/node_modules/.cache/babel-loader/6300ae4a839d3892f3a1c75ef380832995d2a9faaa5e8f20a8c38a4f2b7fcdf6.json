{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shlok\\\\Desktop\\\\react2\\\\react-demo\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { Cluster, clusterApiUrl, Connection, PublicKey, Keypair, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { encodeURL, createQR } from \"@solana/pay\";\nimport BigNumber from \"bignumber.js\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UPIQRCode = (_ref, _ref2) => {\n  _s();\n  let {\n    re\n  } = _ref;\n  let {\n    amount\n  } = _ref2;\n  const ref = useRef(null);\n  console.log(repaddress + \"   \" + amount);\n  createTxQr(repaddress, amount);\n  async function createTxQr(recipientAddr, Amount) {\n    const recipient = new PublicKey(recipientAddr);\n    const amount = new BigNumber(Amount);\n    const reference = new Keypair().publicKey;\n    const label = \"\"; //project name\n    const message = \"\"; //what message on tx ?\n    const memo = \"\"; //project name\n    const url = encodeURL({\n      recipient,\n      amount,\n      reference,\n      label,\n      message,\n      memo\n    });\n    console.log(\"url\", url.href);\n    if (typeof window !== \"undefined\") {\n      const qrCode = createQR(url);\n      qrCode.append(ref.current);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(UPIQRCode, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n_c = UPIQRCode;\nexport default UPIQRCode;\nvar _c;\n$RefreshReg$(_c, \"UPIQRCode\");","map":{"version":3,"names":["Cluster","clusterApiUrl","Connection","PublicKey","Keypair","LAMPORTS_PER_SOL","encodeURL","createQR","BigNumber","useEffect","useRef","useState","jsxDEV","_jsxDEV","UPIQRCode","_ref","_ref2","_s","re","amount","ref","console","log","repaddress","createTxQr","recipientAddr","Amount","recipient","reference","publicKey","label","message","memo","url","href","window","qrCode","append","current","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shlok/Desktop/react2/react-demo/src/Home.js"],"sourcesContent":["\r\nimport {\r\n    Cluster,\r\n    clusterApiUrl,\r\n    Connection,\r\n    PublicKey,\r\n    Keypair,\r\n    LAMPORTS_PER_SOL,\r\n} from \"@solana/web3.js\";\r\nimport { encodeURL, createQR } from \"@solana/pay\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nconst UPIQRCode = ({re},{ amount }) => {\r\n   \r\n\r\n    \r\n   \r\n    const ref = useRef(null);\r\n\r\n   console.log(repaddress+\"   \"+amount)\r\ncreateTxQr(repaddress,amount)\r\n  \r\n    async function createTxQr(recipientAddr, Amount) {\r\n        const recipient = new PublicKey(recipientAddr);\r\n        const amount = new BigNumber(Amount);\r\n        const reference = new Keypair().publicKey;\r\n        const label = \"\"; //project name\r\n        const message = \"\"; //what message on tx ?\r\n        const memo = \"\"; //project name\r\n        const url = encodeURL({\r\n            recipient,\r\n            amount,\r\n            reference,\r\n            label,\r\n            message,\r\n            memo,\r\n        });\r\n        console.log(\"url\", url.href);\r\n\r\n        if (typeof window !== \"undefined\") {\r\n            const qrCode = createQR(url);\r\n            qrCode.append(ref.current);\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={ref} />\r\n        </div>\r\n  );\r\n};\r\n\r\n\r\nexport default UPIQRCode;\r\n\r\n\r\n\r\n"],"mappings":";;AACA,SACIA,OAAO,EACPC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,OAAO,EACPC,gBAAgB,QACb,iBAAiB;AACxB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,aAAa;AACjD,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACpD,MAAMC,SAAS,GAAGA,CAAAC,IAAA,EAAAC,KAAA,KAAqB;EAAAC,EAAA;EAAA,IAApB;IAACC;EAAE,CAAC,GAAAH,IAAA;EAAA,IAAC;IAAEI;EAAO,CAAC,GAAAH,KAAA;EAK9B,MAAMI,GAAG,GAAGV,MAAM,CAAC,IAAI,CAAC;EAEzBW,OAAO,CAACC,GAAG,CAACC,UAAU,GAAC,KAAK,GAACJ,MAAM,CAAC;EACvCK,UAAU,CAACD,UAAU,EAACJ,MAAM,CAAC;EAEzB,eAAeK,UAAUA,CAACC,aAAa,EAAEC,MAAM,EAAE;IAC7C,MAAMC,SAAS,GAAG,IAAIxB,SAAS,CAACsB,aAAa,CAAC;IAC9C,MAAMN,MAAM,GAAG,IAAIX,SAAS,CAACkB,MAAM,CAAC;IACpC,MAAME,SAAS,GAAG,IAAIxB,OAAO,CAAC,CAAC,CAACyB,SAAS;IACzC,MAAMC,KAAK,GAAG,EAAE,CAAC,CAAC;IAClB,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;IACpB,MAAMC,IAAI,GAAG,EAAE,CAAC,CAAC;IACjB,MAAMC,GAAG,GAAG3B,SAAS,CAAC;MAClBqB,SAAS;MACTR,MAAM;MACNS,SAAS;MACTE,KAAK;MACLC,OAAO;MACPC;IACJ,CAAC,CAAC;IACFX,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEW,GAAG,CAACC,IAAI,CAAC;IAE5B,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAC/B,MAAMC,MAAM,GAAG7B,QAAQ,CAAC0B,GAAG,CAAC;MAC5BG,MAAM,CAACC,MAAM,CAACjB,GAAG,CAACkB,OAAO,CAAC;IAC9B;EAGJ;EAEA,oBACIzB,OAAA;IAAA0B,QAAA,eACI1B,OAAA;MAAKO,GAAG,EAAEA;IAAI;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEd,CAAC;AAAC1B,EAAA,CAxCIH,SAAS;AAAA8B,EAAA,GAAT9B,SAAS;AA2Cf,eAAeA,SAAS;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}