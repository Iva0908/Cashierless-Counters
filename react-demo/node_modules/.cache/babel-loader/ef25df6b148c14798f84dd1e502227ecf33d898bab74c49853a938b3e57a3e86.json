{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Shlok\\\\Desktop\\\\react2\\\\react-demo\\\\src\\\\Home.js\",\n  _s = $RefreshSig$();\nimport { Cluster, clusterApiUrl, Connection, PublicKey, Keypair, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { encodeURL, createQR } from \"@solana/pay\";\nimport BigNumber from \"bignumber.js\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home(_ref, _ref2) {\n  _s();\n  let {\n    amount\n  } = _ref;\n  let {\n    address\n  } = _ref2;\n  const [balance, setBalance] = useState(0);\n  const [txDone, setTxDone] = useState(false);\n  createTxQr({\n    address\n  }, {\n    amount\n  });\n  const ref = useRef(null);\n  async function createTxQr(recipientAddr, Amount) {\n    const recipient = new PublicKey(recipientAddr);\n    const amount = new BigNumber(Amount);\n    const reference = new Keypair().publicKey;\n    const label = \"\"; //project name\n    const message = \"\"; //what message on tx ?\n    const memo = \"\"; //project name\n    const url = encodeURL({\n      recipient,\n      amount,\n      reference,\n      label,\n      message,\n      memo\n    });\n    console.log(\"url\", url.href);\n    if (typeof window !== \"undefined\") {\n      const qrCode = createQR(url);\n      qrCode.append(ref.current);\n    }\n    await fetchBalance().then(e => {\n      setBalance(e);\n    });\n    console.log(\"bro bal\", balance);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: ref\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"7vS9Tv3E4YUEaV28ZRJkXux3v2k=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Cluster","clusterApiUrl","Connection","PublicKey","Keypair","LAMPORTS_PER_SOL","encodeURL","createQR","BigNumber","useEffect","useRef","useState","jsxDEV","_jsxDEV","Home","_ref","_ref2","_s","amount","address","balance","setBalance","txDone","setTxDone","createTxQr","ref","recipientAddr","Amount","recipient","reference","publicKey","label","message","memo","url","console","log","href","window","qrCode","append","current","fetchBalance","then","e","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Shlok/Desktop/react2/react-demo/src/Home.js"],"sourcesContent":["\r\nimport {\r\n    Cluster,\r\n    clusterApiUrl,\r\n    Connection,\r\n    PublicKey,\r\n    Keypair,\r\n    LAMPORTS_PER_SOL,\r\n} from \"@solana/web3.js\";\r\nimport { encodeURL, createQR } from \"@solana/pay\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\nexport default function Home({amount},{address}) {\r\n    const [balance, setBalance] = useState(0);\r\n    const [txDone, setTxDone] = useState(false);\r\n\r\n    createTxQr({address}, {amount});\r\n\r\n    const ref = useRef(null);\r\n\r\n\r\n\r\n    \r\n    async function createTxQr(recipientAddr, Amount) {\r\n        const recipient = new PublicKey(recipientAddr);\r\n        const amount = new BigNumber(Amount);\r\n        const reference = new Keypair().publicKey;\r\n        const label = \"\"; //project name\r\n        const message = \"\"; //what message on tx ?\r\n        const memo = \"\"; //project name\r\n        const url = encodeURL({\r\n            recipient,\r\n            amount,\r\n            reference,\r\n            label,\r\n            message,\r\n            memo,\r\n        });\r\n        console.log(\"url\", url.href);\r\n\r\n        if (typeof window !== \"undefined\") {\r\n            const qrCode = createQR(url);\r\n            qrCode.append(ref.current);\r\n        }\r\n\r\n        await fetchBalance()\r\n        .then((e) => {setBalance(e)})\r\n        \r\n        console.log(\"bro bal\", balance)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={ref} />\r\n        </div>\r\n    );\r\n}\r\n\r\n"],"mappings":";;AACA,SACIA,OAAO,EACPC,aAAa,EACbC,UAAU,EACVC,SAAS,EACTC,OAAO,EACPC,gBAAgB,QACb,iBAAiB;AACxB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,aAAa;AACjD,OAAOC,SAAS,MAAM,cAAc;AACpC,SAASC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,eAAe,SAASC,IAAIA,CAAAC,IAAA,EAAAC,KAAA,EAAqB;EAAAC,EAAA;EAAA,IAApB;IAACC;EAAM,CAAC,GAAAH,IAAA;EAAA,IAAC;IAACI;EAAO,CAAC,GAAAH,KAAA;EAC3C,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACzC,MAAM,CAACW,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3Ca,UAAU,CAAC;IAACL;EAAO,CAAC,EAAE;IAACD;EAAM,CAAC,CAAC;EAE/B,MAAMO,GAAG,GAAGf,MAAM,CAAC,IAAI,CAAC;EAKxB,eAAec,UAAUA,CAACE,aAAa,EAAEC,MAAM,EAAE;IAC7C,MAAMC,SAAS,GAAG,IAAIzB,SAAS,CAACuB,aAAa,CAAC;IAC9C,MAAMR,MAAM,GAAG,IAAIV,SAAS,CAACmB,MAAM,CAAC;IACpC,MAAME,SAAS,GAAG,IAAIzB,OAAO,CAAC,CAAC,CAAC0B,SAAS;IACzC,MAAMC,KAAK,GAAG,EAAE,CAAC,CAAC;IAClB,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;IACpB,MAAMC,IAAI,GAAG,EAAE,CAAC,CAAC;IACjB,MAAMC,GAAG,GAAG5B,SAAS,CAAC;MAClBsB,SAAS;MACTV,MAAM;MACNW,SAAS;MACTE,KAAK;MACLC,OAAO;MACPC;IACJ,CAAC,CAAC;IACFE,OAAO,CAACC,GAAG,CAAC,KAAK,EAAEF,GAAG,CAACG,IAAI,CAAC;IAE5B,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;MAC/B,MAAMC,MAAM,GAAGhC,QAAQ,CAAC2B,GAAG,CAAC;MAC5BK,MAAM,CAACC,MAAM,CAACf,GAAG,CAACgB,OAAO,CAAC;IAC9B;IAEA,MAAMC,YAAY,CAAC,CAAC,CACnBC,IAAI,CAAEC,CAAC,IAAK;MAACvB,UAAU,CAACuB,CAAC,CAAC;IAAA,CAAC,CAAC;IAE7BT,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEhB,OAAO,CAAC;EACnC;EAEA,oBACIP,OAAA;IAAAgC,QAAA,eACIhC,OAAA;MAAKY,GAAG,EAAEA;IAAI;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChB,CAAC;AAEd;AAAChC,EAAA,CA5CuBH,IAAI;AAAAoC,EAAA,GAAJpC,IAAI;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}